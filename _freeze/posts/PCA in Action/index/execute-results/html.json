{
  "hash": "b94fb1e226f81d5bcd430528ebe1d390",
  "result": {
    "markdown": "---\ntitle: \"PCA in Action\"\nauthor: \"Presh\"\ndate: \"2024-02-10\"\ncategories: [code, analysis]\nimage: \"image.jpg\"\n---\n\n\nWelcome to my first post! I thought of starting of with basics and revising PCA (Principal Component Analysis) since it is an important concept.\n\nTo get a better understanding, watch StatQuest videos by Josh Starmer:\n\n[PCA Step by Step](https://www.youtube.com/watch?v=FgakZw6K1QQ)\n\nI'm going to go step by step and see how I can make this by myself and also then use packages to give a real life example.\n\nPCA finds the best fitted line by maximizing the sum of the squared distances (SS distance) from the projected points to the origin. The distances are squared so the negative values don't cancel out the positive values.\n\nIn practice, the number of PCs is either the number of variables or the number of samples, whichever is smallest.\n\nOnce all the PCs are figured out, you can have eignevalues (SS distance) to determine the proportion of variation that each PC accounts for.\n\nUsually, PC1 and PC2 have the highest eigenvalues, so we rotate the axes until PC1 is horizontal and PC2 is vertical. Then you can project points from PC1 and PC2 to get the samples.\n\nLet's make our sample data. I'm going to make 6 samples with 5 genes expression data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = data.frame(Samp1 = c(14,4,1,7,3),\n                  Samp2 = c(13,3,8,2,1),\n                  Samp3 = c(8,7,8,16,5),\n                  Samp4 = c(2,10,3,23,2),\n                  Samp5 = c(4,20,9,5,10),\n                  Samp6 = c(5,16,10,12,2)\n                  )\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Samp1 Samp2 Samp3 Samp4 Samp5 Samp6\n1    14    13     8     2     4     5\n2     4     3     7    10    20    16\n3     1     8     8     3     9    10\n4     7     2    16    23     5    12\n5     3     1     5     2    10     2\n```\n:::\n:::\n\n\nMake a scatterplot of Gene 1 vs Gene2\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}